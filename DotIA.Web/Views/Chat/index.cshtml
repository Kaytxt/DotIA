@{
    ViewData["Title"] = "DotIA - Chat";
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-purple: #8d4bff;
            --secondary-purple: #a855f7;
            --dark-bg: #1a132f;
            --darker-bg: #1e1433;
            --card-bg: #2c204d;
            --border-color: #3d2e6b;
            --text-color: #e5e7eb;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: var(--dark-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
            height: 100vh;
        }

        .chat-container {
            display: grid;
            grid-template-columns: 300px 1fr;
            height: 100vh;
        }

        /* SIDEBAR */
        .sidebar {
            background: var(--dark-bg);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo-icon {
            width: 45px;
            height: 45px;
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-purple));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .logo-text {
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--secondary-purple), #ec4899);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .btn-new-chat {
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-purple));
            border: none;
            border-radius: 12px;
            padding: 14px;
            color: white;
            font-weight: 600;
            transition: all 0.3s;
            margin: 20px;
        }

        .btn-new-chat:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(141, 75, 255, 0.4);
        }

        .history-container {
            flex: 1;
            overflow-y: auto;
            padding: 0 20px 20px;
        }

        .history-container::-webkit-scrollbar {
            width: 6px;
        }

        .history-container::-webkit-scrollbar-track {
            background: var(--card-bg);
            border-radius: 10px;
        }

        .history-container::-webkit-scrollbar-thumb {
            background: var(--primary-purple);
            border-radius: 10px;
        }

        .history-title {
            font-size: 12px;
            color: #9ca3af;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 12px;
            padding: 0 8px;
        }

        .history-item {
            padding: 12px 16px;
            margin-bottom: 8px;
            background: var(--card-bg);
            border: 1px solid transparent;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            color: var(--text-color);
            font-size: 14px;
            position: relative;
        }

        .history-item:hover {
            background: var(--border-color);
            border-color: var(--primary-purple);
            transform: translateX(5px);
        }

        .history-item:hover .history-actions {
            opacity: 1;
        }

        .history-item.active {
            border-color: var(--secondary-purple);
            background: var(--border-color);
        }

        .history-actions {
            position: absolute;
            top: 8px;
            right: 8px;
            display: flex;
            gap: 4px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .history-action-btn {
            width: 24px;
            height: 24px;
            border-radius: 6px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            transition: all 0.3s;
        }

        .history-action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .history-action-btn.delete:hover {
            background: #ef4444;
        }

        .status-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 6px;
            font-size: 10px;
            font-weight: 600;
            margin-top: 4px;
            text-transform: uppercase;
        }

        .status-andamento { background: rgba(59, 130, 246, 0.2); color: #3b82f6; }
        .status-concluido { background: rgba(16, 185, 129, 0.2); color: #10b981; }
        .status-pendente { background: rgba(251, 191, 36, 0.2); color: #fbbf24; }
        .status-resolvido { background: rgba(139, 92, 246, 0.2); color: #8b5cf6; }

        .user-info {
            padding: 20px;
            border-top: 1px solid var(--border-color);
            background: var(--card-bg);
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-purple));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* CHAT AREA */
        .chat-area {
            display: flex;
            flex-direction: column;
            background: var(--darker-bg);
            height: 100vh;
        }

        .chat-header {
            background: var(--dark-bg);
            border-bottom: 1px solid var(--border-color);
            padding: 20px 30px;
        }

        .chat-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-color);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 30px;
        }

        .messages-container::-webkit-scrollbar {
            width: 8px;
        }

        .messages-container::-webkit-scrollbar-track {
            background: var(--card-bg);
            border-radius: 10px;
        }

        .messages-container::-webkit-scrollbar-thumb {
            background: var(--primary-purple);
            border-radius: 10px;
        }

        .welcome-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
        }

        .welcome-icon {
            font-size: 80px;
            margin-bottom: 20px;
            animation: float 3s ease-in-out infinite;
        }

        @@keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }

        .welcome-title {
            font-size: 36px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--secondary-purple), #ec4899);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 15px;
        }

        .message {
            display: flex;
            margin-bottom: 25px;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-content {
            display: flex;
            gap: 12px;
            max-width: 70%;
        }

        .message.user .message-content {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            flex-shrink: 0;
        }

        .message.user .message-avatar {
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-purple));
        }

        .message.bot .message-avatar {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        }

        .message.tech .message-avatar {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .message-bubble {
            background: var(--card-bg);
            padding: 16px 20px;
            border-radius: 18px;
            color: var(--text-color);
        }

        .message.user .message-bubble {
            background: linear-gradient(135deg, var(--primary-purple), #7c3aed);
            border-bottom-right-radius: 4px;
        }

        .message.bot .message-bubble {
            border-bottom-left-radius: 4px;
        }

        .message.tech .message-bubble {
            background: linear-gradient(135deg, #059669, #047857);
            border-bottom-left-radius: 4px;
        }

        .tech-badge {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .message-time {
            font-size: 11px;
            color: #9ca3af;
            margin-top: 8px;
        }

        .typing-indicator {
            display: none;
        }

        .typing-indicator.active {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 16px 20px;
            background: var(--card-bg);
            border-radius: 18px;
            width: fit-content;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--primary-purple);
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @@keyframes typing {
            0%, 60%, 100% { transform: translateY(0); opacity: 0.7; }
            30% { transform: translateY(-10px); opacity: 1; }
        }

        .chat-blocked-notice {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(37, 99, 235, 0.2));
            border: 1px solid #3b82f6;
            color: #60a5fa;
            padding: 12px 20px;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 15px;
        }

        /* CHAT ACTIONS BAR */
        .chat-actions-bar {
            background: var(--dark-bg);
            border-top: 1px solid var(--border-color);
            padding: 15px 30px;
            display: flex;
            gap: 12px;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
        }

        .chat-actions-bar.hidden {
            display: none;
        }

        .btn-action {
            padding: 10px 20px;
            border-radius: 10px;
            border: none;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-action:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .btn-action:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-feedback-util {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .btn-feedback-nao-util {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .btn-criar-ticket {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
        }

        .btn-action.selected {
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
        }

        /* INPUT AREA */
        .input-area {
            background: var(--dark-bg);
            border-top: 1px solid var(--border-color);
            padding: 25px 30px;
        }

        .input-wrapper {
            background: var(--card-bg);
            border: 2px solid var(--primary-purple);
            border-radius: 20px;
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .input-wrapper:focus-within {
            border-color: var(--secondary-purple);
            box-shadow: 0 0 0 3px rgba(141, 75, 255, 0.1);
        }

        .input-wrapper.disabled {
            opacity: 0.5;
            pointer-events: none;
        }

        .input-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-purple));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            flex-shrink: 0;
        }

        #messageInput {
            flex: 1;
            background: transparent;
            border: none;
            color: white;
            resize: none;
            outline: none;
            font-size: 15px;
            line-height: 1.5;
            max-height: 150px;
            overflow-y: auto;
        }

        #messageInput::placeholder {
            color: #9ca3af;
        }

        .btn-send {
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-purple));
            border: none;
            border-radius: 12px;
            padding: 12px 30px;
            color: white;
            font-weight: 600;
            transition: all 0.3s;
            white-space: nowrap;
            flex-shrink: 0;
        }

        .btn-send:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(141, 75, 255, 0.4);
        }

        .btn-send:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Modal para editar nome */
        .modal-content {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .modal-header {
            border-bottom: 1px solid var(--border-color);
        }

        .modal-footer {
            border-top: 1px solid var(--border-color);
        }

        .form-control {
            background: var(--darker-bg);
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .form-control:focus {
            background: var(--darker-bg);
            border-color: var(--primary-purple);
            color: var(--text-color);
            box-shadow: 0 0 0 3px rgba(141, 75, 255, 0.1);
        }

        @@media (max-width: 768px) {
            .chat-container {
                grid-template-columns: 1fr;
            }

            .sidebar {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- SIDEBAR -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="logo-container">
                    <div class="logo-icon">🤖</div>
                    <div class="logo-text">DotIA</div>
                </div>
            </div>

            <button class="btn-new-chat" onclick="novoChat()">
                <i class="bi bi-plus-circle"></i> Novo Chat
            </button>

            <div class="history-container">
                <div class="history-title">Histórico de Conversas</div>
                <div id="historyList"></div>
            </div>

            <div class="user-info d-flex align-items-center gap-3">
                <div class="user-avatar">👤</div>
                <div class="flex-grow-1">
                    <div class="fw-bold">@ViewBag.Nome</div>
                    <small class="text-success">● Online</small>
                </div>
                <a href="/Login/Sair" class="btn btn-sm btn-outline-light">
                    <i class="bi bi-box-arrow-right"></i>
                </a>
            </div>
        </div>

        <!-- CHAT AREA -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-title">
                    <span>💬</span>
                    <span id="chatTitle">DotIA - Assistente Inteligente</span>
                </div>
            </div>

            <div class="messages-container" id="messagesContainer">
                <div class="welcome-screen" id="welcomeScreen">
                    <div class="welcome-icon">🤖</div>
                    <div class="welcome-title">Bem-vindo ao DotIA!</div>
                    <p class="text-muted" style="max-width: 600px; color: #9ca3af;">
                        Sou sua assistente virtual especializada em suporte técnico de TI.
                        Faça qualquer pergunta sobre tecnologia, problemas técnicos ou funcionamento do sistema.
                        Estou aqui para ajudar! 🚀
                    </p>
                </div>

                <div id="messagesList"></div>

                <div class="typing-indicator" id="typingIndicator">
                    <div class="d-flex gap-2">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                    <span>DotIA está digitando...</span>
                </div>
            </div>

            <!-- BARRA DE AÇÕES DO CHAT -->
            <div class="chat-actions-bar hidden" id="chatActionsBar">
                <button class="btn-action btn-feedback-util" id="btnFeedbackUtil" onclick="avaliarChatCompleto(true)">
                    <i class="bi bi-hand-thumbs-up"></i> Este chat foi útil
                </button>
                <button class="btn-action btn-feedback-nao-util" id="btnFeedbackNaoUtil" onclick="avaliarChatCompleto(false)">
                    <i class="bi bi-hand-thumbs-down"></i> Este chat não ajudou
                </button>
                <button class="btn-action btn-criar-ticket" id="btnCriarTicket" onclick="criarTicketDireto()">
                    <i class="bi bi-ticket-detailed"></i> Criar Ticket
                </button>
            </div>

            <div class="input-area">
                <div id="chatBlockedNotice"></div>
                <div class="input-wrapper" id="inputWrapper">
                    <div class="input-icon">💬</div>
                    <textarea id="messageInput"
                              placeholder="Digite sua pergunta aqui..."
                              rows="1"
                              onkeydown="handleKeyPress(event)"
                              oninput="autoResize(this)"></textarea>
                    <button class="btn-send" id="sendBtn" onclick="enviarMensagem()">
                        Enviar <i class="bi bi-send"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para editar nome do chat -->
    <div class="modal fade" id="editChatModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Nome do Chat</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" id="editChatName" placeholder="Novo nome do chat">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" onclick="salvarNomeChat()">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let chatAtualId = null;
        let chatAtualStatus = null;
        let pollingInterval = null;
        let chatEditandoId = null;
        let mensagensProcessadas = [];

        window.addEventListener('load', () => {
            carregarHistorico();
        });

        function autoResize(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                enviarMensagem();
            }
        }

        async function enviarMensagem() {
            const input = document.getElementById('messageInput');
            const mensagem = input.value.trim();

            if (!mensagem) return;

            document.getElementById('welcomeScreen').style.display = 'none';

            // ✅ SE ESTÁ EM UM CHAT ESPECÍFICO, verifica o status DESSE chat
            if (chatAtualId) {
                try {
                    const response = await fetch(`/Chat/verificar-resposta/${chatAtualId}`);
                    const data = await response.json();
                    chatAtualStatus = data.status;
                } catch (error) {
                    console.error('Erro ao verificar status:', error);
                }
            }

            // ✅ SE O CHAT ATUAL está pendente (status 3), envia para técnico
            if (chatAtualStatus === 3 && chatAtualId) {
                console.log('📤 Enviando mensagem para técnico (chat pendente)');

                adicionarMensagem(mensagem, 'user');
                input.value = '';
                input.style.height = 'auto';

                const sendBtn = document.getElementById('sendBtn');
                sendBtn.disabled = true;

                try {
                    const response = await fetch('/Chat/EnviarParaTecnico', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            chatId: chatAtualId,
                            mensagem: mensagem
                        })
                    });

                    const data = await response.json();

                    if (data.sucesso) {
                        mostrarNotificacao('Mensagem enviada ao técnico!', 'success');
                    } else {
                        mostrarNotificacao('Erro ao enviar mensagem', 'warning');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    mostrarNotificacao('Erro ao conectar com o servidor', 'warning');
                } finally {
                    sendBtn.disabled = false;
                }

                return;
            }

            // ✅ FLUXO NORMAL: Criar novo chat OU continuar chat em andamento
            console.log('🤖 Enviando mensagem para IA');

            adicionarMensagem(mensagem, 'user');
            input.value = '';
            input.style.height = 'auto';

            const sendBtn = document.getElementById('sendBtn');
            sendBtn.disabled = true;

            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.classList.add('active');

            try {
                const response = await fetch('/Chat/EnviarPergunta', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ pergunta: mensagem })
                });

                const data = await response.json();
                typingIndicator.classList.remove('active');

                if (data.sucesso) {
                    chatAtualId = data.chatId;
                    chatAtualStatus = 1; // Em andamento
                    adicionarMensagem(data.resposta, 'bot', mensagem, data.chatId);
                    await carregarHistorico();
                } else {
                    adicionarMensagem('Desculpe, ocorreu um erro ao processar sua pergunta.', 'bot');
                }
            } catch (error) {
                typingIndicator.classList.remove('active');
                adicionarMensagem('Erro ao conectar com o servidor.', 'bot');
                console.error('Erro:', error);
            } finally {
                sendBtn.disabled = false;
            }
        }

        function adicionarMensagem(texto, tipo, perguntaOriginal = '', chatId = null) {
            const messagesList = document.getElementById('messagesList');
            const now = new Date();
            const time = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });

            let avatar = '';
            let badge = '';

            if (tipo === 'user') avatar = '👤';
            else if (tipo === 'bot') avatar = '🤖';
            else if (tipo === 'tech') {
                avatar = '🛠️';
                badge = '<div class="tech-badge">✓ Resposta do Técnico</div>';
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${tipo}`;
            if (chatId) messageDiv.dataset.chatId = chatId;
            messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-avatar">${avatar}</div>
            <div class="message-bubble">
                ${badge}
                <div class="message-text">${texto}</div>
                <div class="message-time">${time}</div>
            </div>
        </div>
    `;

            messagesList.appendChild(messageDiv);

            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;

            // ✅ Mostra a barra de ações quando uma mensagem da IA é adicionada
            if (tipo === 'bot' && chatId) {
                mostrarBarraAcoes();
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML.replace(/'/g, "\\'");
        }

        // ✅ NOVA FUNÇÃO: Avaliar chat completo
        async function avaliarChatCompleto(foiUtil) {
            if (!chatAtualId) {
                mostrarNotificacao('Nenhum chat ativo para avaliar', 'warning');
                return;
            }

            // Desabilita todos os botões da barra de ações
            const btnUtil = document.getElementById('btnFeedbackUtil');
            const btnNaoUtil = document.getElementById('btnFeedbackNaoUtil');
            const btnTicket = document.getElementById('btnCriarTicket');

            btnUtil.disabled = true;
            btnNaoUtil.disabled = true;
            btnTicket.disabled = true;

            if (foiUtil) {
                btnUtil.classList.add('selected');
            } else {
                btnNaoUtil.classList.add('selected');
            }

            try {
                // Busca as informações do chat atual
                const chat = await obterDadosChat(chatAtualId);

                const response = await fetch('/Chat/AvaliarResposta', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        pergunta: chat.pergunta,
                        resposta: chat.resposta,
                        foiUtil,
                        chatId: chatAtualId
                    })
                });

                const data = await response.json();

                if (data.sucesso) {
                    if (!foiUtil) {
                        chatAtualStatus = 3;
                        bloquearChatParaIA();
                        iniciarPolling(chatAtualId);
                        esconderBarraAcoes();
                        mostrarNotificacao('✅ Ticket criado com o chat completo! Agora está com um técnico.', 'success');
                    } else {
                        chatAtualStatus = 2;
                        esconderBarraAcoes();
                        mostrarNotificacao('Avaliação registrada! Obrigado pelo feedback. 😊', 'success');
                    }

                    await carregarHistorico();
                }
            } catch (error) {
                console.error('Erro ao avaliar:', error);
                btnUtil.disabled = false;
                btnNaoUtil.disabled = false;
                btnTicket.disabled = false;
                btnUtil.classList.remove('selected');
                btnNaoUtil.classList.remove('selected');
            }
        }

        // ✅ NOVA FUNÇÃO: Criar ticket direto
        async function criarTicketDireto() {
            if (!chatAtualId) {
                mostrarNotificacao('Nenhum chat ativo para criar ticket', 'warning');
                return;
            }

            if (!confirm('Deseja criar um ticket para este chat? Ele será enviado para um técnico.')) {
                return;
            }

            const btnTicket = document.getElementById('btnCriarTicket');
            btnTicket.disabled = true;

            try {
                const response = await fetch('/Chat/CriarTicket', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ chatId: chatAtualId })
                });

                const data = await response.json();

                if (data.sucesso) {
                    chatAtualStatus = 3;
                    bloquearChatParaIA();
                    iniciarPolling(chatAtualId);
                    esconderBarraAcoes();
                    mostrarNotificacao('✅ Ticket criado com sucesso! O chat completo foi enviado ao técnico.', 'success');
                    await carregarHistorico();
                } else {
                    mostrarNotificacao('Erro ao criar ticket. Este chat pode já ter um ticket associado.', 'warning');
                    btnTicket.disabled = false;
                }
            } catch (error) {
                console.error('Erro ao criar ticket:', error);
                mostrarNotificacao('Erro ao conectar com o servidor', 'warning');
                btnTicket.disabled = false;
            }
        }

        // ✅ NOVA FUNÇÃO: Obter dados do chat
        async function obterDadosChat(chatId) {
            const messages = document.querySelectorAll(`[data-chat-id="${chatId}"]`);
            let pergunta = '';
            let resposta = '';

            messages.forEach(msg => {
                if (msg.classList.contains('user')) {
                    const text = msg.querySelector('.message-text');
                    if (text) pergunta = text.textContent;
                } else if (msg.classList.contains('bot')) {
                    const text = msg.querySelector('.message-text');
                    if (text) resposta = text.textContent;
                }
            });

            return { pergunta, resposta };
        }

        // ✅ NOVA FUNÇÃO: Mostrar barra de ações
        function mostrarBarraAcoes() {
            const actionsBar = document.getElementById('chatActionsBar');
            const btnUtil = document.getElementById('btnFeedbackUtil');
            const btnNaoUtil = document.getElementById('btnFeedbackNaoUtil');
            const btnTicket = document.getElementById('btnCriarTicket');

            // Só mostra se o chat não está concluído ou com técnico
            if (chatAtualStatus === 1) {
                actionsBar.classList.remove('hidden');
                btnUtil.disabled = false;
                btnNaoUtil.disabled = false;
                btnTicket.disabled = false;
                btnUtil.classList.remove('selected');
                btnNaoUtil.classList.remove('selected');
            }
        }

        // ✅ NOVA FUNÇÃO: Esconder barra de ações
        function esconderBarraAcoes() {
            const actionsBar = document.getElementById('chatActionsBar');
            actionsBar.classList.add('hidden');
        }

        function bloquearChatParaIA() {
            const noticeDiv = document.getElementById('chatBlockedNotice');
            noticeDiv.innerHTML = `
        <div class="chat-blocked-notice">
            <i class="bi bi-chat-dots"></i> <strong>Chat com Técnico Ativo</strong><br>
            Este chat está em atendimento com técnico. Suas mensagens aqui vão para ele. 
            <strong>Você pode criar novos chats</strong> clicando em "Novo Chat"!
        </div>
    `;
        }

        function desbloquearChatParaIA() {
            const noticeDiv = document.getElementById('chatBlockedNotice');
            noticeDiv.innerHTML = '';
        }

        function iniciarPolling(chatId) {
            if (pollingInterval) {
                clearInterval(pollingInterval);
            }

            pollingInterval = setInterval(async () => {
                try {
                    const response = await fetch(`/Chat/VerificarResposta/${chatId}`);
                    const data = await response.json();

                    if (data.temResposta && data.solucao) {
                        processarNovasMensagens(data.solucao);

                        // Se o ticket foi fechado pelo técnico
                        if (data.statusTicket === 2) {
                            clearInterval(pollingInterval);
                            pollingInterval = null;

                            // Só desbloqueia se for o chat atual
                            if (chatAtualId === chatId) {
                                desbloquearChatParaIA();
                                chatAtualStatus = 4;
                            }

                            await carregarHistorico();
                            mostrarNotificacao('✅ Técnico finalizou o atendimento deste chat!', 'success');
                        }
                    }
                } catch (error) {
                    console.error('Erro no polling:', error);
                }
            }, 5000);
        }

        function processarNovasMensagens(solucaoCompleta) {
            const mensagens = solucaoCompleta.split('\n\n');

            mensagens.forEach(mensagem => {
                if (mensagem.trim() && !mensagensProcessadas.includes(mensagem.trim())) {
                    mensagensProcessadas.push(mensagem.trim());

                    let mensagemLimpa = mensagem.trim();

                    const usuarioRegex = /^\[USUÁRIO\s*-\s*\d{2}\/\d{2}\/\d{4}\s+\d{2}:\d{2}\]\s*/;
                    const tecnicoRegex = /^\[TÉCNICO\s*-\s*\d{2}\/\d{2}\/\d{4}\s+\d{2}:\d{2}\]\s*/;

                    const isUsuario = usuarioRegex.test(mensagemLimpa);
                    const isTecnico = tecnicoRegex.test(mensagemLimpa);

                    mensagemLimpa = mensagemLimpa.replace(usuarioRegex, '');
                    mensagemLimpa = mensagemLimpa.replace(tecnicoRegex, '');

                    if (mensagemLimpa) {
                        if (isTecnico) {
                            adicionarMensagem(mensagemLimpa, 'tech');
                            mostrarNotificacao('💬 Nova mensagem do técnico!', 'success');
                        }
                    }
                }
            });
        }

        function mostrarNotificacao(mensagem, tipo = 'info') {
            const cores = {
                success: 'linear-gradient(135deg, #10b981, #059669)',
                warning: 'linear-gradient(135deg, #fbbf24, #f59e0b)',
                info: 'linear-gradient(135deg, #3b82f6, #2563eb)'
            };

            const notif = document.createElement('div');
            notif.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${cores[tipo]};
        padding: 15px 25px;
        border-radius: 12px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        animation: slideInRight 0.3s ease-out;
        max-width: 400px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.3);
    `;
            notif.innerHTML = mensagem;
            document.body.appendChild(notif);
            setTimeout(() => notif.remove(), 5000);
        }

        async function carregarHistorico() {
            try {
                const response = await fetch('/Chat/ObterHistorico');
                const historico = await response.json();

                const historyList = document.getElementById('historyList');
                historyList.innerHTML = '';

                if (historico.length === 0) {
                    historyList.innerHTML = `
                <div style="text-align: center; padding: 20px; color: #9ca3af; font-size: 13px;">
                    Nenhum histórico ainda.<br>Comece uma conversa!
                </div>
            `;
                    return;
                }

                historico.forEach(chat => {
                    const item = document.createElement('div');
                    item.className = 'history-item';

                    // Destaca chat atual
                    if (chat.id === chatAtualId) {
                        item.classList.add('active');
                    }

                    let badgeClass = 'status-andamento';
                    if (chat.status === 2) badgeClass = 'status-concluido';
                    else if (chat.status === 3) badgeClass = 'status-pendente';
                    else if (chat.status === 4) badgeClass = 'status-resolvido';

                    item.innerHTML = `
                <div class="history-actions">
                    <button class="history-action-btn" onclick="editarNomeChat(event, ${chat.id}, '${escapeHtml(chat.titulo)}')">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="history-action-btn delete" onclick="excluirChat(event, ${chat.id})">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                <div>${chat.titulo || chat.pergunta.substring(0, 30) + '...'}</div>
                <div class="status-badge ${badgeClass}">${chat.statusTexto}</div>
            `;
                    item.onclick = () => carregarChat(chat);
                    historyList.appendChild(item);
                });
            } catch (error) {
                console.error('Erro ao carregar histórico:', error);
            }
        }

        function editarNomeChat(event, chatId, nomeAtual) {
            event.stopPropagation();
            chatEditandoId = chatId;
            document.getElementById('editChatName').value = nomeAtual;
            const modal = new bootstrap.Modal(document.getElementById('editChatModal'));
            modal.show();
        }

        async function salvarNomeChat() {
            const novoNome = document.getElementById('editChatName').value.trim();
            if (!novoNome) {
                mostrarNotificacao('Digite um nome válido', 'warning');
                return;
            }

            try {
                const response = await fetch(`/Chat/EditarTitulo/${chatEditandoId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ novoTitulo: novoNome })
                });

                const data = await response.json();

                if (data.sucesso) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editChatModal'));
                    modal.hide();
                    mostrarNotificacao('Nome do chat atualizado!', 'success');
                    await carregarHistorico();

                    if (chatAtualId === chatEditandoId) {
                        document.getElementById('chatTitle').textContent = novoNome;
                    }
                } else {
                    mostrarNotificacao('Erro ao atualizar nome do chat', 'warning');
                }
            } catch (error) {
                console.error('Erro ao editar chat:', error);
                mostrarNotificacao('Erro ao conectar com o servidor', 'warning');
            }
        }

        async function excluirChat(event, chatId) {
            event.stopPropagation();

            if (!confirm('Tem certeza que deseja excluir esta conversa? Esta ação não pode ser desfeita.')) {
                return;
            }

            try {
                const response = await fetch(`/Chat/Excluir/${chatId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.sucesso) {
                    mostrarNotificacao('Chat excluído com sucesso!', 'success');

                    if (chatAtualId === chatId) {
                        novoChat();
                    }

                    await carregarHistorico();
                } else {
                    mostrarNotificacao('Erro ao excluir chat', 'warning');
                }
            } catch (error) {
                console.error('Erro ao excluir chat:', error);
                mostrarNotificacao('Erro ao conectar com o servidor', 'warning');
            }
        }

        async function carregarChat(chat) {
            document.getElementById('welcomeScreen').style.display = 'none';
            const messagesList = document.getElementById('messagesList');
            messagesList.innerHTML = '';

            mensagensProcessadas = [];

            chatAtualId = chat.id;
            chatAtualStatus = chat.status;

            console.log(`📂 Carregando chat #${chat.id} com status: ${chat.status}`);

            adicionarMensagem(chat.pergunta, 'user');
            adicionarMensagem(chat.resposta, 'bot', chat.pergunta, chat.id);

            // ✅ Mostra aviso apenas se ESTE chat específico está com técnico
            if (chat.status === 3) {
                bloquearChatParaIA();
                esconderBarraAcoes();
                console.log('🔒 Chat bloqueado para IA - modo técnico ativo');
            } else if (chat.status === 1) {
                desbloquearChatParaIA();
                mostrarBarraAcoes();
            } else {
                // Status 2 (concluído) ou 4 (resolvido)
                desbloquearChatParaIA();
                esconderBarraAcoes();
            }

            if (chat.idTicket) {
                try {
                    const response = await fetch(`/Chat/VerificarResposta/${chat.id}`);
                    const data = await response.json();

                    if (data.temResposta && data.solucao) {
                        const mensagens = data.solucao.split('\n\n');

                        mensagens.forEach(mensagem => {
                            if (mensagem.trim()) {
                                mensagensProcessadas.push(mensagem.trim());

                                let mensagemLimpa = mensagem.trim();

                                const usuarioRegex = /^\[USUÁRIO\s*-\s*\d{2}\/\d{2}\/\d{4}\s+\d{2}:\d{2}\]\s*/;
                                const tecnicoRegex = /^\[TÉCNICO\s*-\s*\d{2}\/\d{2}\/\d{4}\s+\d{2}:\d{2}\]\s*/;

                                const isUsuario = usuarioRegex.test(mensagemLimpa);
                                const isTecnico = tecnicoRegex.test(mensagemLimpa);

                                mensagemLimpa = mensagemLimpa.replace(usuarioRegex, '');
                                mensagemLimpa = mensagemLimpa.replace(tecnicoRegex, '');

                                if (mensagemLimpa) {
                                    if (isUsuario) {
                                        adicionarMensagem(mensagemLimpa, 'user');
                                    } else if (isTecnico) {
                                        adicionarMensagem(mensagemLimpa, 'tech');
                                    }
                                }
                            }
                        });

                        // Se ainda está pendente, continua polling
                        if (data.statusTicket === 1 && chat.status === 3) {
                            iniciarPolling(chat.id);
                        }
                    } else if (chat.status === 3) {
                        iniciarPolling(chat.id);
                    }
                } catch (error) {
                    console.error('Erro ao verificar resposta:', error);
                }
            }

            document.getElementById('chatTitle').textContent = chat.titulo || 'Chat';

            document.querySelectorAll('.history-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget?.classList.add('active');
        }

        function novoChat() {
            // ✅ Para o polling apenas se houver um ativo
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }

            // ✅ Reseta as variáveis do chat atual
            chatAtualId = null;
            chatAtualStatus = null;
            mensagensProcessadas = [];

            // ✅ Limpa a tela
            document.getElementById('messagesList').innerHTML = '';
            document.getElementById('welcomeScreen').style.display = 'flex';
            document.getElementById('chatTitle').textContent = 'DotIA - Assistente Inteligente';
            document.getElementById('messageInput').value = '';
            document.getElementById('messageInput').focus();
            desbloquearChatParaIA();
            esconderBarraAcoes();

            document.querySelectorAll('.history-item').forEach(item => {
                item.classList.remove('active');
            });

            console.log('✨ Novo chat criado - pronto para conversar com IA');
        }

        window.addEventListener('beforeunload', () => {
            if (pollingInterval) {
                clearInterval(pollingInterval);
            }
        });
    </script>
</body>
</html>