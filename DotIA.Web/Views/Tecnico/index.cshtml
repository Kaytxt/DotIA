@{
    ViewData["Title"] = "DotIA - Painel do Técnico";
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-green: #10b981;
            --secondary-green: #059669;
            --dark-bg: #1a132f;
            --darker-bg: #1e1433;
            --card-bg: #2c204d;
            --border-color: #3d2e6b;
            --text-color: #e5e7eb;
        }

        body {
            background: var(--dark-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
            height: 100vh;
            margin: 0;
        }

        .tech-container {
            display: grid;
            grid-template-columns: 320px 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .sidebar {
            background: var(--dark-bg);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo-icon {
            width: 45px;
            height: 45px;
            background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .logo-text {
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary-green), #06b6d4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stats-card {
            background: linear-gradient(135deg, var(--card-bg), var(--darker-bg));
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 20px;
            margin: 20px;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        .stat-value {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary-green);
        }

        .tickets-container {
            flex: 1;
            overflow-y: auto;
            padding: 0 20px;
        }

        .tickets-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text-color);
        }

        .ticket-card {
            background: var(--card-bg);
            border: 2px solid transparent;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .ticket-card:hover {
            border-color: var(--primary-green);
            transform: translateX(5px);
        }

        .ticket-card.active {
            border-color: var(--primary-green);
            background: linear-gradient(135deg, var(--card-bg), #1e3a32);
        }

        .badge-warning {
            background: #fbbf24;
            color: #1a132f;
        }

        .work-area {
            display: flex;
            flex-direction: column;
            background: var(--darker-bg);
            height: 100vh;
            overflow: hidden;
        }

        .work-header {
            background: var(--dark-bg);
            border-bottom: 1px solid var(--border-color);
            padding: 20px 30px;
        }

        .ticket-avatar {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
            padding: 40px;
        }

        .empty-icon {
            font-size: 100px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .conversation-area {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 30px;
            max-height: calc(100vh - 200px);
            scroll-behavior: smooth;
        }

        .conversation-area::-webkit-scrollbar {
            width: 8px;
        }

        .conversation-area::-webkit-scrollbar-track {
            background: var(--card-bg);
            border-radius: 10px;
        }

        .conversation-area::-webkit-scrollbar-thumb {
            background: var(--primary-green);
            border-radius: 10px;
        }

        .message-box {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 20px;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message-box.user {
            border-left: 4px solid #8d4bff;
        }

        .message-box.bot {
            border-left: 4px solid #3b82f6;
        }

        .message-box.tech {
            border-left: 4px solid var(--primary-green);
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(5, 150, 105, 0.1));
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
            padding-bottom: 12px;
            border-bottom: 1px solid var(--border-color);
        }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
        }

        .message-avatar.user {
            background: linear-gradient(135deg, #8d4bff, #a855f7);
        }

        .message-avatar.bot {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        }

        .message-avatar.tech {
            background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
        }

        .message-meta {
            flex: 1;
        }

        .message-author {
            font-weight: 600;
            color: var(--text-color);
        }

        .message-time {
            font-size: 12px;
            color: #9ca3af;
        }

        .message-content {
            color: var(--text-color);
            line-height: 1.6;
        }

        .solution-area {
            background: var(--dark-bg);
            border-top: 1px solid var(--border-color);
            padding: 20px 30px;
        }

        .solution-container {
            background: var(--card-bg);
            border: 2px solid var(--primary-green);
            border-radius: 16px;
            padding: 20px;
        }

        .action-buttons {
            display: flex;
            gap: 12px;
        }

        .btn-respond {
            flex: 1;
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            border: none;
            padding: 12px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-respond:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
        }

        .btn-resolve {
            flex: 1;
            background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
            border: none;
            padding: 12px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-resolve:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.4);
        }

        .btn-respond:disabled,
        .btn-resolve:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid var(--primary-green);
            color: var(--primary-green);
        }

        .form-control, .form-control:focus {
            background: var(--darker-bg);
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .form-control:focus {
            border-color: var(--primary-green);
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
        }

        .form-control::placeholder {
            color: #6b7280;
        }

        .btn-secondary {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .btn-secondary:hover {
            background: var(--border-color);
            border-color: var(--primary-green);
        }

        .typing-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 16px 20px;
            background: rgba(16, 185, 129, 0.1);
            border-radius: 18px;
            margin-top: 10px;
            animation: slideIn 0.3s ease-out;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--primary-green);
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @@keyframes typing {
            0%, 60%, 100% { transform: translateY(0); opacity: 0.7; }
            30% { transform: translateY(-8px); opacity: 1; }
        }

        @@media (max-width: 768px) {
            .tech-container {
                grid-template-columns: 1fr;
            }

            .sidebar {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="tech-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="logo-container">
                    <div class="logo-icon">🛠️</div>
                    <div class="logo-text">DotIA Tech</div>
                </div>
            </div>

            <div class="stats-card">
                <div class="stat-item">
                    <span class="text-muted">Tickets Pendentes</span>
                    <span class="stat-value" id="totalTickets">0</span>
                </div>
                <div class="stat-item">
                    <span class="text-muted">Resolvidos Hoje</span>
                    <span class="stat-value text-success" id="resolvidosHoje">0</span>
                </div>
            </div>

            <div class="tickets-container">
                <div class="tickets-title">
                    <i class="bi bi-list-task"></i> Tickets Pendentes
                </div>
                <div id="ticketsList"></div>
            </div>

            <div class="p-3 border-top border-secondary">
                <a href="/Login/Sair" class="btn btn-outline-light w-100">
                    <i class="bi bi-box-arrow-right"></i> Sair
                </a>
            </div>
        </div>

        <div class="work-area">
            <div class="work-header">
                <div id="ticketHeader" style="display: none;">
                    <div class="d-flex align-items-center gap-3">
                        <div class="ticket-avatar">🎫</div>
                        <div>
                            <h5 class="mb-1" id="headerTitle" style="color: var(--text-color);">Ticket #0</h5>
                            <small class="text-muted" id="headerMeta">Solicitante: -</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="conversation-area" id="conversationArea">
                <div class="empty-state">
                    <div class="empty-icon">📋</div>
                    <h3 class="mb-3" style="color: var(--text-color);">Selecione um Ticket</h3>
                    <p class="text-muted">
                        Escolha um ticket da lista ao lado para visualizar os detalhes e fornecer uma solução
                    </p>
                </div>
            </div>

            <div class="solution-area" id="solutionArea" style="display: none;">
                <div class="alert alert-success mb-3" id="successMessage" style="display: none;">
                    <i class="bi bi-check-circle"></i> <span id="successText"></span>
                </div>

                <div class="solution-container">
                    <label class="form-label fw-bold mb-3" style="color: var(--primary-green); font-size: 16px;">
                        <i class="bi bi-chat-dots"></i> Digite sua resposta
                    </label>
                    <textarea id="solutionInput"
                              class="form-control mb-3"
                              rows="5"
                              placeholder="Escreva sua mensagem aqui..."
                              onkeydown="handleKeyPress(event)"></textarea>

                    <div class="d-flex gap-2 justify-content-between">
                        <button class="btn btn-secondary" onclick="limparFormulario()">
                            <i class="bi bi-x-circle"></i> Limpar
                        </button>

                        <div class="action-buttons">
                            <button class="btn-respond" id="respondBtn" onclick="responderTicket(false)">
                                <i class="bi bi-reply"></i>
                                Enviar Mensagem
                            </button>
                            <button class="btn-resolve" id="resolveBtn" onclick="responderTicket(true)">
                                <i class="bi bi-check-circle"></i>
                                Resolver e Fechar
                            </button>
                        </div>
                    </div>

                    <div class="mt-3 text-muted small">
                        <i class="bi bi-info-circle"></i> <strong>Enviar Mensagem:</strong> Mantém ticket aberto • <strong>Resolver:</strong> Fecha o ticket
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let ticketSelecionado = null;
        let tickets = [];
        let conversationMessages = [];
        let pollingTecnicoInterval = null;

        window.addEventListener('load', () => {
            carregarTickets();
        });

        // ✅ Para o polling quando sair da página
        window.addEventListener('beforeunload', () => {
            if (pollingTecnicoInterval) {
                clearInterval(pollingTecnicoInterval);
            }
        });

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                responderTicket(false);
            }
        }

        async function carregarTickets() {
            try {
                const response = await fetch('/Tecnico/ObterTickets');
                tickets = await response.json();

                const ticketsList = document.getElementById('ticketsList');
                ticketsList.innerHTML = '';

                document.getElementById('totalTickets').textContent = tickets.length;

                if (tickets.length === 0) {
                    ticketsList.innerHTML = `
                            <div class="text-center py-5 text-muted">
                                <div style="font-size: 48px;">🎉</div>
                                <div class="mt-2">Nenhum ticket pendente!</div>
                            </div>
                        `;
                    return;
                }

                tickets.forEach(ticket => {
                    const dataAbertura = new Date(ticket.dataAbertura);
                    const dataFormatada = dataAbertura.toLocaleDateString('pt-BR');

                    const ticketDiv = document.createElement('div');
                    ticketDiv.className = 'ticket-card';
                    ticketDiv.onclick = () => selecionarTicket(ticket);
                    ticketDiv.innerHTML = `
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="fw-bold" style="color: var(--primary-green);">Ticket #${ticket.id}</span>
                                <span class="badge badge-warning">${ticket.status}</span>
                            </div>
                            <div class="mb-2 small" style="color: var(--text-color);">
                                <i class="bi bi-person"></i> ${ticket.nomeSolicitante}
                            </div>
                            <div class="text-muted small text-truncate">${ticket.descricaoProblema}</div>
                            <div class="text-muted small mt-2">
                                <i class="bi bi-calendar"></i> ${dataFormatada}
                            </div>
                        `;

                    ticketsList.appendChild(ticketDiv);
                });
            } catch (error) {
                console.error('Erro ao carregar tickets:', error);
            }
        }

        function selecionarTicket(ticket) {
            ticketSelecionado = ticket;
            conversationMessages = [];

            document.querySelectorAll('.ticket-card').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');

            document.getElementById('ticketHeader').style.display = 'block';
            document.getElementById('headerTitle').textContent = `Ticket #${ticket.id}`;
            document.getElementById('headerMeta').textContent = `Solicitante: ${ticket.nomeSolicitante}`;

            const conversationArea = document.getElementById('conversationArea');
            conversationArea.innerHTML = '';

            // Adiciona pergunta do usuário
            adicionarMensagemAoChat('user', ticket.perguntaOriginal, ticket.nomeSolicitante);

            // Adiciona resposta da IA
            adicionarMensagemAoChat('bot', ticket.respostaIA || 'A resposta automática não foi suficiente para resolver o problema do usuário.', 'DotIA');

            // Se já tem solução anterior, processa e mostra cada mensagem (técnico E usuário)
            if (ticket.solucao) {
                const mensagens = ticket.solucao.split('\n\n');
                mensagens.forEach(mensagem => {
                    if (mensagem.trim()) {
                        let mensagemLimpa = mensagem.trim();

                        // Verifica se é mensagem do usuário ou técnico
                        const usuarioRegex = /^\[USUÁRIO\s*-\s*\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}\]\s*/;
                        const tecnicoRegex = /^\[TÉCNICO\s*-\s*\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}\]\s*/;

                        const isUsuario = usuarioRegex.test(mensagemLimpa);
                        const isTecnico = tecnicoRegex.test(mensagemLimpa);

                        // Remove timestamp
                        const timestampRegex = /^\[\w+\s*-\s*\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}\]\s*/;
                        mensagemLimpa = mensagemLimpa.replace(timestampRegex, '');

                        if (mensagemLimpa) {
                            if (isUsuario) {
                                adicionarMensagemAoChat('user', mensagemLimpa, ticket.nomeSolicitante);
                            } else if (isTecnico) {
                                adicionarMensagemAoChat('tech', mensagemLimpa, 'Você (Técnico)');
                            } else {
                                // Fallback: assume técnico
                                adicionarMensagemAoChat('tech', mensagemLimpa, 'Você (Técnico)');
                            }
                        }
                    }
                });
            }

            document.getElementById('solutionArea').style.display = 'block';
            document.getElementById('solutionInput').value = '';
            document.getElementById('successMessage').style.display = 'none';

            // ✅ Inicia polling para receber novas mensagens do usuário
            iniciarPollingTecnico(ticket.id);
        }

        function adicionarMensagemAoChat(tipo, conteudo, autor) {
            const conversationArea = document.getElementById('conversationArea');
            const now = new Date();
            const time = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });

            let avatarClass = tipo;
            let icon = '';
            if (tipo === 'user') icon = '👤';
            else if (tipo === 'bot') icon = '🤖';
            else if (tipo === 'tech') icon = '🛠️';

            const messageDiv = document.createElement('div');
            messageDiv.className = `message-box ${tipo}`;
            messageDiv.innerHTML = `
                    <div class="message-header">
                        <div class="message-avatar ${avatarClass}">${icon}</div>
                        <div class="message-meta">
                            <div class="message-author">${autor}</div>
                            <div class="message-time">${time}</div>
                        </div>
                    </div>
                    <div class="message-content">${conteudo}</div>
                `;

            conversationArea.appendChild(messageDiv);

            // Scroll suave para a última mensagem
            setTimeout(() => {
                messageDiv.scrollIntoView({ behavior: 'smooth', block: 'end' });
            }, 100);

            conversationMessages.push({ tipo, conteudo, autor, time });
        }

        async function responderTicket(marcarComoResolvido) {
            if (!ticketSelecionado) return;

            const solucao = document.getElementById('solutionInput').value.trim();

            // Se for resolver e fechar, não precisa de mensagem, mas pede confirmação
            if (marcarComoResolvido) {
                if (!confirm('Tem certeza que deseja fechar este ticket? O cliente será notificado.')) {
                    return;
                }
            } else {
                // Se for apenas enviar mensagem, precisa de texto
                if (!solucao) {
                    alert('Por favor, escreva uma mensagem para o cliente.');
                    return;
                }
            }

            const respondBtn = document.getElementById('respondBtn');
            const resolveBtn = document.getElementById('resolveBtn');
            respondBtn.disabled = true;
            resolveBtn.disabled = true;

            // Mostra indicador de digitação apenas se tiver mensagem
            const conversationArea = document.getElementById('conversationArea');
            let typingDiv = null;

            if (solucao) {
                typingDiv = document.createElement('div');
                typingDiv.id = 'typing-temp';
                typingDiv.className = 'typing-indicator';
                typingDiv.innerHTML = `
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <span style="font-size: 12px; color: var(--primary-green); margin-left: 8px;">Enviando mensagem...</span>
                    `;
                conversationArea.appendChild(typingDiv);

                // Scroll para o indicador
                setTimeout(() => {
                    typingDiv.scrollIntoView({ behavior: 'smooth', block: 'end' });
                }, 100);
            }

            try {
                const response = await fetch('/Tecnico/ResolverTicket', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ticketId: ticketSelecionado.id,
                        solucao: solucao || "Ticket fechado pelo técnico.",
                        marcarComoResolvido: marcarComoResolvido
                    })
                });

                const data = await response.json();

                // Remove indicador de digitação
                if (typingDiv) {
                    const tempTyping = document.getElementById('typing-temp');
                    if (tempTyping) tempTyping.remove();
                }

                if (data.sucesso) {
                    // Adiciona mensagem do técnico ao chat apenas se houver texto (sem timestamp local)
                    if (solucao) {
                        adicionarMensagemAoChat('tech', solucao, 'Você (Técnico)');
                    }

                    const successMessage = document.getElementById('successMessage');
                    const successText = document.getElementById('successText');

                    successText.textContent = data.mensagem;
                    successMessage.style.display = 'block';

                    // Limpa formulário
                    document.getElementById('solutionInput').value = '';

                    setTimeout(() => {
                        successMessage.style.display = 'none';
                        if (marcarComoResolvido) {
                            carregarTickets();

                            conversationArea.innerHTML = `
                                    <div class="empty-state">
                                        <div class="empty-icon">✅</div>
                                        <h3 class="mb-3" style="color: var(--text-color);">Ticket Resolvido com Sucesso!</h3>
                                        <p class="text-muted">
                                            O ticket foi marcado como resolvido e o cliente foi notificado.
                                        </p>
                                    </div>
                                `;

                            document.getElementById('solutionArea').style.display = 'none';
                            document.getElementById('ticketHeader').style.display = 'none';
                            ticketSelecionado = null;
                        } else {
                            mostrarNotificacao('Mensagem enviada! O ticket continua em acompanhamento.', 'success');
                        }
                    }, 2000);
                } else {
                    alert('Erro ao processar ticket.');
                }
            } catch (error) {
                if (typingDiv) {
                    const tempTyping = document.getElementById('typing-temp');
                    if (tempTyping) tempTyping.remove();
                }
                console.error('Erro:', error);
                alert('Erro ao conectar com o servidor.');
            } finally {
                respondBtn.disabled = false;
                resolveBtn.disabled = false;
            }
        }

        function limparFormulario() {
            document.getElementById('solutionInput').value = '';
            document.getElementById('successMessage').style.display = 'none';
            document.getElementById('respondBtn').disabled = false;
            document.getElementById('resolveBtn').disabled = false;
        }

        function mostrarNotificacao(mensagem, tipo = 'info') {
            const cores = {
                success: 'linear-gradient(135deg, #10b981, #059669)',
                warning: 'linear-gradient(135deg, #fbbf24, #f59e0b)',
                info: 'linear-gradient(135deg, #3b82f6, #2563eb)'
            };

            const notif = document.createElement('div');
            notif.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: ${cores[tipo]};
                    padding: 15px 25px;
                    border-radius: 12px;
                    color: white;
                    font-weight: 600;
                    z-index: 10000;
                    animation: slideInRight 0.3s ease-out;
                    max-width: 400px;
                `;
            notif.innerHTML = mensagem;
            document.body.appendChild(notif);
            setTimeout(() => notif.remove(), 5000);
        }

        // ✅ NOVO: Polling para técnico receber mensagens do usuário
        function iniciarPollingTecnico(ticketId) {
            // Limpa polling anterior se existir
            if (pollingTecnicoInterval) {
                clearInterval(pollingTecnicoInterval);
            }

            // Armazena hash das mensagens para detectar mudanças
            let ultimoHash = '';

            // Verifica a cada 3 segundos (mais rápido que o do cliente)
            pollingTecnicoInterval = setInterval(async () => {
                try {
                    const response = await fetch(`/Tecnico/ObterTicket/${ticketId}`);
                    const data = await response.json();

                    if (data && data.ticket && data.ticket.solucao) {
                        const hashAtual = data.ticket.solucao.length + '_' + data.ticket.solucao.substring(0, 50);

                        // Se mudou, atualiza a conversa
                        if (hashAtual !== ultimoHash) {
                            ultimoHash = hashAtual;

                            // Recarrega a conversa
                            const conversationArea = document.getElementById('conversationArea');
                            conversationArea.innerHTML = '';

                            // Adiciona pergunta original
                            adicionarMensagemAoChat('user', ticketSelecionado.perguntaOriginal, ticketSelecionado.nomeSolicitante);
                            adicionarMensagemAoChat('bot', ticketSelecionado.respostaIA || 'A resposta automática não foi suficiente.', 'DotIA');

                            // Processa todas as mensagens
                            const mensagens = data.ticket.solucao.split('\n\n');
                            mensagens.forEach(mensagem => {
                                if (mensagem.trim()) {
                                    let mensagemLimpa = mensagem.trim();

                                    const usuarioRegex = /^\[USUÁRIO\s*-\s*\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}\]\s*/;
                                    const tecnicoRegex = /^\[TÉCNICO\s*-\s*\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}\]\s*/;

                                    const isUsuario = usuarioRegex.test(mensagemLimpa);
                                    const isTecnico = tecnicoRegex.test(mensagemLimpa);

                                    const timestampRegex = /^\[\w+\s*-\s*\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}\]\s*/;
                                    mensagemLimpa = mensagemLimpa.replace(timestampRegex, '');

                                    if (mensagemLimpa) {
                                        if (isUsuario) {
                                            adicionarMensagemAoChat('user', mensagemLimpa, ticketSelecionado.nomeSolicitante);
                                        } else if (isTecnico) {
                                            adicionarMensagemAoChat('tech', mensagemLimpa, 'Você (Técnico)');
                                        } else {
                                            adicionarMensagemAoChat('tech', mensagemLimpa, 'Você (Técnico)');
                                        }
                                    }
                                }
                            });

                            mostrarNotificacao('Nova mensagem do usuário!', 'success');
                        }
                    }

                    // Se o ticket foi fechado, para o polling
                    if (data && data.ticket && data.ticket.idStatus === 2) {
                        clearInterval(pollingTecnicoInterval);
                        pollingTecnicoInterval = null;
                    }
                } catch (error) {
                    console.error('Erro no polling do técnico:', error);
                }
            }, 3000); // Verifica a cada 3 segundos
        }
    </script>
</body>
</html>